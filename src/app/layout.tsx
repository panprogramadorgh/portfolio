"use client"

import React, { MouseEventHandler, useContext } from "react";
// import type { Metadata } from "next";
import localFont from "next/font/local";
import BackdropProvider, { useCheckBackdropVisibility, BackdropCtx } from "./contexts/backdrop-ctx";
import "./globals.css";

const geistSans = localFont({
  src: "./fonts/GeistVF.woff",
  variable: "--font-geist-sans",
  weight: "100 900",
});

// const geistMono = localFont({
//   src: "./fonts/GeistMonoVF.woff",
//   variable: "--font-geist-mono",
//   weight: "100 900",
// });

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en">
      <BackdropProvider>
        <BodyWrapper>{children}</BodyWrapper>
      </BackdropProvider>
    </html>
  );
}

function BodyWrapper({ children }: { children: React.ReactNode }) {
  const backdropVisible = useCheckBackdropVisibility(true);
  const backdropVisibleState = useContext(BackdropCtx);
  const handleBackdropClick: MouseEventHandler<HTMLDivElement> = () => {
    if (backdropVisibleState)
      backdropVisibleState[1](false);
  }

  return (
    <body
      className={`
          ${geistSans.className}
          relative
          bg-gradient-to-b from-grastart to-graend
          text-foreground
          antialiased

          ${backdropVisible ? "overflow-hidden" : ""}
          `}
    >
      {children}
      {backdropVisible ? (
        <div className={`
          absolute
          inset-0
          w-full
          bg-neutral-950/10
          backdrop-blur-sm
        `}
          onClick={handleBackdropClick}
        >
        </div>
      ) : null}
    </body>
  )
}